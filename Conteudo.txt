Estudando React

Pode ser usado componentes de classe ou função para renderizar
Componentes de classe - stateless - sem estado

class App extends Component{
  render(){
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <p>
            Edit <code>src/App.js</code> and save to reload.
          </p>
          <a
            className="App-link"
            href="https://reactjs.org"
            target="_blank"
            rel="noopener noreferrer"
          >
            Learn React
          </a>
        </header>
      </div>
    );
  }
}

//------------------------------------------//

Componentes de função - stateless - sem estado
function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;
//------------------------------------------//
Componente de classe stateful

class App extends Component{

  //Apos as atualização não há necessidade do construtor
  /* constructor(props){
    super(props);
    //bind feito manualmente
    this.handlePClick = this.handlePClick.bind(this)  
    } */
  
  state = {
    name:'Valter Monteiro',
    counter: 0
  };
  //adicionando métodos
  /* handlePClick(){
    const {name} = this.state; //não é possível acessar this! Antes do bind
    console.log(`<p> clicado ${name}`);
   }*/

  handlePClick = ()=>{ //usando arrow function para não precisar do bind.
    //metodo que altera o state
    this.setState({name:'Valter Monteiro Da Silva'})
  }
  
  //Usando arrow function
  handleAClick = (event)=>{
    event.preventDefault(); //elemina as ações padrão do site
    const {counter} = this.state;
    this.setState({counter: counter + 1});
  }

  render(){
    /* const name = this.state.name; */
    const {name, counter} = this.state; //usando a destructuring


    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <p onClick={this.handlePClick}> 
            {name} {counter}
          </p>
          <a
            onClick={this.handleAClick}
            className="App-link"
            href="https://reactjs.org"
            target="_blank"
            rel="noopener noreferrer"
          >
            Este é o Link
          </a>
        </header>
      </div>
    );
  }
}

export default App;

//------------------------------------------//
States com arrays e objetos

class App extends Component{
  state = {
    posts:[
      {
        id: 1,
        title: 'O título 1',
        body: 'O corpo 1'
      },
      {
        id: 2,
        title: 'O título 2',
        body: 'O corpo 2'
      },
      {
        id: 3,
        title: 'O título 3',
        body: 'O corpo 3'
      },
    ]
  };

  render(){
    const { posts } = this.state;

    return (
      <div className="App">
        {posts.map(post => (
          <div key={post.id}>
          <h1>{post.title}</h1>
          <p>{post.body}</p>
          </div>
          ))}
      </div>
    );
  }
}

export default App;

//------------------------------------------//

Lifecycle methods (métodos de ciclo de vida) - Parte 1

class App extends Component{
  state = {
    counter: 0,
    posts:[
      {
        id: 1,
        title: 'O título 1',
        body: 'O corpo 1'
      },
      {
        id: 2,
        title: 'O título 2',
        body: 'O corpo 2'
      },
      {
        id: 3,
        title: 'O título 3',
        body: 'O corpo 3'
      },
    ]
  };

  timeoutUpdate = null;

  //montando o componente
  componentDidMount(){
    this.handleTimeout();
  }
  
  //atualizando o componente
  componentDidUpdate(){
    this.handleTimeout();

  }

  //limpando o componente
  componentWillUnmount(){
    clearTimeout(this.timeoutUpdate);
  }

  handleTimeout = ()=>{
    const { posts, counter } = this.state;
    posts[0].title = 'O título mudou'

    this.timeoutUpdate = setTimeout(()=>{
      this.setState({posts, counter: counter+1})
    },1000);
  }

  render(){
    const { posts, counter } = this.state;

    
    
    return (
      <div className="App">
        <h1>{counter}</h1>
        {posts.map(post => (
          <div key={post.id}>
          <h1>{post.title}</h1>
          <p>{post.body}</p>
          </div>
          ))}
      </div>
    );
  }
}

export default App;

//--------------------------------------------//

Buscando dados externos com fetch (Data fetching)


class App extends Component {
  state = {
    posts: []
  };


  //montando o componente
  componentDidMount() {
    this.loadPosts();
  }

  loadPosts = async () => {
    const postsResponse =
      fetch('https://jsonplaceholder.typicode.com/posts');

    const photoResponse = fetch('https://jsonplaceholder.typicode.com/photos');

    const [posts, photos] = await Promise.all([postsResponse, photoResponse]);

    const postsJson = await posts.json();
    const photosJson = await photos.json();

    //uninindo dois array pelo menor
    const postsAndPhotos = postsJson.map((post, index)=>{
      return {
        ...post, cover: photosJson[index].url
      }
    });
    
    this.setState({ posts: postsAndPhotos });
  }

  //atualizando o componente
  componentDidUpdate() {

  }

  //limpando o componente
  componentWillUnmount() {
  }


  render() {
    const { posts } = this.state;

    return (
      <section className='container'>
        <div className="posts">
          {posts.map(post => (
            <div className='post'>
              <img src={post.cover} alt={post.title}/>
              <div key={post.id} className="post-content">
                <h1>{post.title}</h1>
                <p>{post.body}</p>
              </div>
            </div>
          ))}
        </div>
      </section>
    );
  }
}

export default App;

//-----css-----//

.container{
  max-width: 1200px;
  margin: 0 auto;
  min-height: 100vh;
  background: #eee;
  padding: 30px;
}
.posts{
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 30px;
}

.post{
  background: #fff;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  transform: transform 100ms ease-in-out;
}

.post:hover{
  transform: scale(1.05);
}

.post img{
  max-width: 100%;
}
.post-content{
  padding: 30px;
}

//-------------------------------------------//
Props e organização dos componentes - Parte 1

**Criando e separando componente - PostCard

export const PostCard = ({title, cover, body, id}) => 
        <div className="post">
            <img src={cover} alt={title} />
            <div className="post-content">
                <h1>{title}</h1>
                <p>{body}</p>
            </div>
        </div>

**Ajustado App

import './App.css';
import { Component } from 'react';
import { PostCard } from './components/PostCard';

class App extends Component {
  state = {
    posts: []
  };


  //montando o componente
  componentDidMount() {
    this.loadPosts();
  }

  loadPosts = async () => {
    const postsResponse =
      fetch('https://jsonplaceholder.typicode.com/posts');

    const photoResponse = fetch('https://jsonplaceholder.typicode.com/photos');

    const [posts, photos] = await Promise.all([postsResponse, photoResponse]);

    const postsJson = await posts.json();
    const photosJson = await photos.json();

    //uninindo dois array pelo menor
    const postsAndPhotos = postsJson.map((post, index) => {
      return {
        ...post, cover: photosJson[index].url
      }
    });

    this.setState({ posts: postsAndPhotos });
  }

  //atualizando o componente
  componentDidUpdate() {

  }

  //limpando o componente
  componentWillUnmount() {
  }


  render() {
    const { posts } = this.state;

    return (
      <section className='container'>
        <div className="posts">
          {posts.map(post => (
            <PostCard 
            key={post.id}
            title={post.title}
            body={post.body}
            cover={post.cover}
            id={post.id}
            />
          ))}
        </div>
      </section>
    );
  }
}

export default App;

//------------------------------------------//
 Props e organização dos componentes - Parte 2

**Criando e separando utils - outras funções

export const loadPosts = async () => {
    const postsResponse =
        fetch('https://jsonplaceholder.typicode.com/posts');

    const photoResponse = fetch('https://jsonplaceholder.typicode.com/photos');

    const [posts, photos] = await Promise.all([postsResponse, photoResponse]);

    const postsJson = await posts.json();
    const photosJson = await photos.json();

    //uninindo dois array pelo menor
    const postsAndPhotos = postsJson.map((post, index) => {
        return {
            ...post, cover: photosJson[index].url
        }
    });
    return postsAndPhotos;
}

**Criando e separando componentes - Posts

import { PostCard } from "../PostCard"

export const Posts = ({posts}) => {
    return (
        <div className="posts">
            {posts.map(post => (    
                <PostCard
                    key={post.id}
                    title={post.title}
                    body={post.body}
                    cover={post.cover}
                    id={post.id}
                />
            ))}
        </div>
    );
}

**App atualizando - Note que o mesmo está reduzindo seu tamanho a cada novo componente

import { Component } from 'react';

import './App.css';
import { Posts } from './components/Posts';

import {loadPosts} from './utils/load-posts'

class App extends Component {
  state = {
    posts: []
  };


  //montando o componente
  async componentDidMount() {
    await this.loadPosts();
  }

  loadPosts = async () => {
    const postsAndPhotos = await loadPosts();
    this.setState({ posts: postsAndPhotos });
  }

  //atualizando o componente
  componentDidUpdate() {

  }

  //limpando o componente
  componentWillUnmount() {
  }


  render() {
    const { posts } = this.state;

    return (
      <section className='container'>
        <Posts posts={posts}/>
      </section>
    );
  }
}

export default App;

//-------------------------//
Props e organização dos componentes - Parte 3






